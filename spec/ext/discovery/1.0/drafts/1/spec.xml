<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" ipr="full3978" docName="oauth-discovery-1_0.xml">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="3" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Implementers' Draft" ?>

  <front>
    <title>OAuth Discovery 1.0 Draft 1</title>

    <author initials="E" surname="Hammer-Lahav" fullname="Eran Hammer-Lahav">
      <organization>Hueniverse, LLC</organization>
      <address>
        <email>eran@hueniverse.com</email>
      </address>
    </author>

    <date day="12" month="December" year="2007"/>

    <abstract>
      <t>
        OAuth Core 1.0 defines a protocol for delegating user access to
        Consumer applications without sharing the user's private credentials.
        The protocol specifies a set of configuration values that enable
        Consumers to find and communicate with the Service Provider. However,
        OAuth Core leaves the process of communicating that information undefined.
      </t>
      <t>
        The discovery protocol provides a way to for Consumers to receive
        the required configuration data from the Service Provider in a
        machine-readable format. It creates an extendable framework for
        communicating current and future services and extensions.
      </t>
      <t>
        The protocol has been designed to keep the workflow as simple as
        possible, use existing discovery practices, and maintain strong
        flexibility allowing Service Providers to structure their configuration
        as needed.
      </t>
    </abstract>

  </front>
  <middle>

    <section title="Notation and Conventions">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119" />.
        Domain name examples use <xref target="RFC2606" /> and OAuth extension
        examples use the URI prefix <spanx style="verb">http://oauth.net/example/</spanx>.
      </t>
      <t>
        Unless otherwise noted, this specification is written as a direct
        continuation of <xref target="OAuth Core 1.0" />, inheriting the definitions and
        guidelines set by it.
      </t>
    </section>

    <section title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="OAuth Discovery:">
            A general name for the workflow described in this specification.
          </t>
          <t hangText="Consumer Identity:">
            The Consumer Key, Consumer Secret, and any other information used
            to establish an identity for the Consumer such as public key.
          </t>
          <t hangText="Realm:">
            An absolute HTTP(S) URL used to group Protected Resources together
            by associating them to the URL. Realms allow sharing information
            across multiple Protected Resources.
          </t>
          <t hangText="Resource Realm:">
            Realm for sharing OAuth configuration across multiple Protected
            Resources.
          </t>
          <t hangText="User Realm:">
            Realm for sharing an Access Token across multiple Protected
            Resources.
          </t>
          <t hangText="Consumer Realm:">
            Realm for sharing a Consumer Identity across multiple Protected
            Resources.
          </t>
          <t hangText="Realm Definition:">
            An <spanx style="verb">XRD</spanx> element containing the Service
            Provider OAuth configuration, in a machine-readable format.
          </t>
          <t hangText="Discovery Definition Document:">
            An XRDS document which binds together Realm Definitions and other
            services, in a machine-readable format.
          </t>
          <t hangText="OAuth Endpoints:">
            The group of four request endpoints defined by <xref target="OAuth Core 1.0" />
            (Request Token, User authorization, Access Token, and Protected
            Resource).
          </t>
        </list>
      </t>
    </section>

    <section title="Scope and Limitations">
      <t>
        While a fully automated discovery process of authentication,
        authorization, and services is a highly desired objective, OAuth
        Discovery is inheritably limited. In many cases, Consumer Key
        allocation requires human interaction. This is done for legal,
        compliance, or other reasons, which hinder automated discovery
        without prior manual registration.
      </t>
      <t>
        OAuth Discovery does not address the methods in which Protected
        Resources are accessed. Without clear standards of the Protected
        Resources space, any discovery protocol will eventually require some
        form of external handling of the Protected Resources. However, combines
        with other specifications, the entire process can be fully automated
        from authentication, through authorization, to services.
      </t>
      <t>
        OAuth Discovery is designed to accommodate two scenarios:

        <list style="symbols">
          <t>
            Automated Initiation - If the requested Protected Resource endpoint
            is known, the Consumer attempts accessing it without the any
            authorization credentials, causing the request to fail. The failure
            reply contains the information needed to perform discovery. This
            scenario is similar to the <xref target="RFC2617">HTTP Basic
            Authentication</xref> flow.
          </t>
          <t>
            Manual Initiation - The information needed to perform discovery is
            provided by the Service Provider in ways not specified by this
            specification. This information allows the Consumer to configure
            its OAuth resources automatically instead of hard-coding the OAuth
            endpoints and properties.
          </t>
        </list>
      </t>
      <t>
        Service Providers MUST support Automated Initiation, and MAY support
        Manual Initiation by providing the information needed in documentation
        or other means.
      </t>
    </section>

    <section title="Realms">
      <t>
        OAuth Discovery uses Realms to associate Protected Resources to a
        common configuration used for OAuth authentication. A Realm MUST be a
        valid endpoint URL pointing to an accessible resource using HTTP
        requests. Service Providers MAY put access restrictions on the Realm
        URL. In order for the Consumer to perform the OAuth Discovery workflow,
        the Consumer requests the resource at the Realm URL.
      </t>
      <t>
        Each Protected Resource MUST be associated with a Resource Realm, which
        in turn identifies the resource's User Realm and a Consumer Realm.
        In order to enable complex configuration of Realms without complicating
        the workflow, a Protected Resource may omit an explicit User Realm or
        Consumer Realm association, allowing them to implicitly default to the
        value of the Resource Realm.
      </t>
      <t>
        The User Realm and Consumer Realm inform the Consumer when established
        credentials MAY be reused between Protected Resources. Realms are valid
        values of the <spanx style="verb">realm</spanx> parameter as defined in
        <xref target="RFC2617" /> section 1.2, but are more restrictive in
        their requirements and syntax.
      </t>
    </section>
    
    <section title="Discovery Workflow">
      <t>
        The OAuth Discovery workflow centers around the retrieval and parsing
        of the Discovery Definition Document which is the machine-readable
        format of the <xref target="OAuth Core 1.0" /> configuration. While both the
        Service Provider and Consumer play a role in the workflow, it is
        focused on actions performed by the Consumer. The workflow includes the
        following steps:

        <list style="numbers">
          <t>Identify the Resource Realm.</t>
          <t>Retrieve the Discovery Definition Document.</t>
          <t>Parse the Discovery Definition Document.</t>
          <t>Establish Consumer Identity.</t>
          <t>Establish User Access.</t>
        </list>
      </t>
      <t>
        Once all steps have been performed, the Consumer has the required OAuth
        credentials to access the Protected Resource following the
        <xref target="OAuth Core 1.0" /> section 7 workflow.
      </t>

      <section title="Identify the Resource Realm">
        <t>
          Service Providers are likely to offer multiple Protected Resources,
          and MAY choose to partition access to them. Partitioning is done by
          associating Protected Resources to a Resource Realm, a common unique
          URL. Each Resource Realm has its own Realm Definition contained within
          a Discovery Definition Document.
        </t>
        <t>
          Service Providers identify the Resource Realm of each Protected
          Resource, which is used by the Consumers locate the Discovery
          Definition  Document for that Realm.
        </t>

        <section title="Service Providers" anchor="realm_container">
          <t>
            Service Providers MUST identify the Resource Realm of each Protected
            Resource when denying Consumer access due to lack of OAuth
            credentials. Service Providers MAY document Realm information via
            other means to enable Manual Initiation.
          </t>
          <t>
            The Resource Realm is provided by at least one of the following
            methods in decreasing preference:

            <list style="numbers">
              <t>
                In the OAuth HTTP <spanx style="verb">WWW-Authenticate</spanx>
                header as defined in <xref target="OAuth Core 1.0" /> section
                5.4.2, using the <spanx style="verb">xoauth_realm</spanx>
                parameter.
              </t>
              <t>
                In the OAuth HTTP <spanx style="verb">WWW-Authenticate</spanx>
                header <spanx style="verb">realm</spanx> parameter as defined
                in <xref target="RFC2617" />.
              </t>
              <t>
                In the <spanx style="verb">xoauth_realm</spanx> parameter sent
                as part of the HTTP response body as defined in
                <xref target="OAuth Core 1.0" /> section 5.3.
               </t>
              <t>
                In the HTTP response body contained within a
                <spanx style="verb">&lt;link&gt;</spanx> element as follow:
                <spanx style="verb">&lt;link rel="auth" type="application/xrds+xml" href="http://sp.example.com/" /&gt;</spanx>,
                where the <spanx style="verb">href</spanx> attributes is the Resource Realm.
              </t>
            </list>
          </t>
          <t>
            In case the Service Provider supports the OAuth HTTP Authorization
            Scheme, but does not support OAuth Discovery, the Consumer will
            fail to locate a valid Discovery Definition Document by requesting
            the resource at the Resource Realm URL.
          </t>
        </section>

        <section title="Consumers">
          <t>
            When attempting to access a Protected Resource using OAuth, the
            Consumer MUST first identify the Resource Realm. This allows the
            Consumer to check if it has already performed OAuth Discovery on
            that Realm and can reused that configuration. Consumers MUST NOT
            use configuration obtained for one Resource Realm with another.
          </t>
          <t>
            To obtain the Resource Realm, if it has not been provided as part
            of a Manual Initiation process, the Consumer attempts to access the
            Protected Resource by making a request to the Protected Resource
            endpoint without any OAuth credentials. The request will fail with
            the Service Provider indicating the Resource Realm in its response.
          </t>
          <t>
            To identify the Realm, the Consumer MUST analyze the Service
            Provider response by searching in order the
            <xref target="realm_container">list of supported Realm containers</xref>
            for a Realm value, and MUST stop as soon as the first Resource
            Realm is found.
          </t>
        </section>
        
      </section>

      <section title="Retrieve the Discovery Definition Document" anchor="yadis">
        <t>
          The Consumer retrieves the Discovery Definition Document from the
          Realm using the Yadis protocol as defined in <xref target="XRI Resolution 2.0" />
          section 6. If the Yadis protocol is successful, the Consumer obtains
          the Discovery Definition Document. If the Yadis protocol fails, it
          SHALL be assumed that the Service Provider does not support OAuth
          Discovery.
        </t>
      </section>

      <section title="Parse the Discovery Definition Document">
        <t>
          The Discovery Definition Document is an XRDS-formatted document
          providing a machine-readable representation of the OAuth
          configuration needed to allow Consumers access using <xref target="OAuth Core 1.0" />.
          The XRDS format provides a simple and extendable framework and is
          defined in <xref target="XRI Resolution 2.0" /> section 4.
        </t>
        <t>
          OAuth Discovery uses a subset of the elements defined in
          <xref target="XRI Resolution 2.0" />. Service Providers MAY use XRDS
          tags and attributes not listed in this specification but such
          elements MUST NOT change the meaning or behavior of the Discovery
          Definition Document from an OAuth Discovery standpoint. Consumers MAY
          ignore XRDS tags and attributes not listed in this specification. All
          elements not beginning with "oauth:" are defined in
          <xref target="XRI Resolution 2.0" /> section 4. If a conflict exists
          between this specification and <xref target="XRI Resolution 2.0" />,
          the definitions in this specification are to be used.
        </t>
        <t>
          Unless otherwise noted, all tags, attributes, values, and XML
          namespaces are case sensitive.
        </t>

        <section title="Document Structure">
          <t>
            The Discovery Definition Document is a valid XRDS document. It
            contains a single <spanx style="verb">XRDS</spanx> root element.
            For example:

            <figure>
              <artwork>
                &lt;XRDS xmlns="xri://$xrds"&gt;
              </artwork>
            </figure>
          </t>
          <t>
            The XRDS element MUST include at least one Realm Definition and MAY
            include any number of other <spanx style="verb">XRD</spanx>
            elements which are ignored in OAuth Discovery. Realm Definitions
            MUST include the <spanx style="verb">xmlns:oauth</spanx> attribute
            with a value of <spanx style="verb">http://oauth.net/discovery/1.0</spanx>.
            For example:

            <figure>
              <artwork>
                &lt;XRD xmlns:oauth="http://oauth.net/discovery/1.0" xmlns="xri://$XRD*($v*2.0)"&gt;
              </artwork>
            </figure>
          </t>
          <t>
            Each Realm Definition describes a Resource Realm, a User Realm, a
            Consumer Realm, or any combination, and contains
            <spanx style="verb">Service</spanx> elements describing OAuth
            endpoints or other services. The document MUST NOT include more
            than one Realm Definition per Realm, and MAY include one and only
            one Realm Definition unbound to a specific Realm, which serves as a
            catch-all element. The order in which
            <spanx style="verb">XRD</spanx> elements appear in the document
            MUST NOT affect its meaning.
          </t>
        </section>

        <section title="Realm Definition Element">
          <t>
            The Realm Definition is an <spanx style="verb">XRD</spanx> element
            which contains the <spanx style="verb">xmlns:oauth</spanx>
            attribute and the following elements:
            
            <list style="hanging">
              <t hangText="&lt;Query&gt;">
                0 or 1 per Realm Definition with type
                <spanx style="verb">xs:anyURI</spanx>. Value identifies which
                Realm the definition covers, MUST contain a valid Realm, and
                MUST NOT be empty. A Discovery Definition Document MUST NOT
                contain more than one Realm Definition with a missing
                <spanx style="verb">Query</spanx> element.
              </t>
              <t hangText="&lt;Expires&gt;">
                0 or 1 per Realm Definition with type
                <spanx style="verb">xs:dateTime</spanx>. Consumers MUST NOT use
                the Realm Definition after the given expiration. If a newly
                retrieved document contains expired Realm Definitions, they
                MUST be ignore. If a cached document contains expired
                Realm Definitions, the Consumer MUST discard the document and
                obtain a newer copy. If the HTTP transport caching semantics
                specify a different expiration time, the Consumer MUST use the
                earlier of the two.
              </t>
              <t hangText="&lt;Service&gt;">
                0 or more per Realm Definition as defined in
                <xref target="service_element" />.
              </t>
              <t hangText="&lt;oauth:Realm&gt;">
                0 or more per Realm Definition with type
                <spanx style="verb">xs:anyURI</spanx>. Value MUST contain a
                valid Realm and MUST NOT be empty. Element MUST contain a
                <spanx style="verb">type</spanx> attribute set to either
                <spanx style="verb">user</spanx> or
                <spanx style="verb">consumer</spanx> based on the Realm type.
                The element supports an OPTIONAL
                <spanx style="verb">priority</spanx> attribute as defined in
                <xref target="XRI Resolution 2.0" /> section 4.3.3.
              </t>
              <t hangText="&lt;oauth:RequestParameterMethods&gt;">
                0 or 1 per Realm Definition as defined
                in <xref target="request_param_element" />.
              </t>
              <t hangText="&lt;oauth:RequestSignature&gt;">
                0 or 1 per Realm Definition as defined
                in <xref target="req_sig_element" />.
              </t>
              <t hangText="&lt;oauth:Reference&gt;">
                0 or 1 per Realm Definition with type
                <spanx style="verb">xs:anyURI</spanx>. Value MUST be a valid
                discoverable Realm. The element is used to reference another
                Realm while retaining the Protected Resource Realm association.
                When a <spanx style="verb">oauth:Reference</spanx> element is
                used, is MUST be the only element contained in the Realm
                Definition with the exception of <spanx style="verb">Expires</spanx>
                and <spanx style="verb">Query</spanx>. The referenced
                Realm MUST NOT contain another
                <spanx style="verb">oauth:Reference</spanx> element.
              </t>
            </list>
          </t>
        </section>

        <section title="Service Types" anchor="service_types">
          <t>
            Realm Definitions use <spanx style="verb">Service</spanx>
            elements to document the endpoints and services associated with
            the OAuth workflow. The <spanx style="verb">Service</spanx> element
            contains a child element <spanx style="verb">Type</spanx> which is
            used to indicate the type of service described.
          </t>
          <t>
            To identify the OAuth Endpoints, each is given a unique URI,
            listed with their <xref target="OAuth Core 1.0" /> section
            reference:

            <list style="hanging">
              <t hangText="Request Token:">
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/request</spanx> - section 6.1.1.
              </t>
              <t hangText="User Authorization:">
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/authorize</spanx> - section 6.2.1.
              </t>
              <t hangText="Access Token:">
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/access</spanx> - section 6.3.1.
              </t>
              <t hangText="Protected Resource:">
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/resource</spanx> - section 7.
              </t>
            </list>
          </t>
          <t>
            <spanx style="verb">Service</spanx> elements MAY contain
            multiple <spanx style="verb">Type</spanx> elements and as follows:

            <list style="symbols">
              <t>
                Each <spanx style="verb">Service</spanx> element MAY
                contain one, but MUST NOT contain more than one 
                <spanx style="verb">Type</spanx> element with an OAuth
                Endpoint URI.
              </t>
              <t>
                Realm Definitions used for User Realms MUST contain a
                <spanx style="verb">Service</spanx> element for each of the
                OAuth Endpoints with the exception of
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/resource</spanx>,
                which MAY be omitted if the Realm Definition contains both
                <spanx style="verb">oauth:RequestParameterMethods</spanx> and
                <spanx style="verb">oauth:RequestSignature</spanx> elements.
              </t>
              <t>
                If multiple <spanx style="verb">Service</spanx> elements are
                present for the same endpoint type, they SHOULD contain the
                OPTIONAL <spanx style="verb">priority</spanx> attribute and
                differ in their priority value.
              </t>
              <t>
                To speed up discovery, if more than one
                <spanx style="verb">Type</spanx> element is defined for that
                service, Service Providers SHOULD list the
                <spanx style="verb">Type</spanx> element for the OAuth
                Endpoints URI first.
              </t>
            </list>
          </t>
        </section>

        <section title="Service Element" anchor="service_element">
          <t>
            The Service element contains the OPTIONAL 
            <spanx style="verb">priority</spanx> attribute and the following
            elements:
            
            <list style="hanging">
              <t hangText="&lt;Type&gt;">
                1 or more per <spanx style="verb">Service</spanx> element with
                type <spanx style="verb">xs:anyURI</spanx> as defined in
                <xref target="service_types" />. The
                <spanx style="verb">Type</spanx> element supports an OPTIONAL
                <spanx style="verb">oauth:required</spanx> attribute with type
                <spanx style="verb">xs:boolean</spanx> and default value
                <spanx style="verb">false</spanx> if omitted. The
                <spanx style="verb">oauth:required</spanx> attribute MUST NOT
                be used with service types defined in this specification and is
                provided for <xref target="extensions"> discovery extensions</xref>.
            </t>
              <t hangText="&lt;URI&gt;">
                0 or 1 per <spanx style="verb">Service</spanx> element with
                type <spanx style="verb">xs:anyURI</spanx>. The value is the
                URL the Consumer uses in the <xref target="OAuth Core 1.0" /> protocol.
                <spanx style="verb">Service</spanx> elements for the OAuth
                Endpoints MUST include a <spanx style="verb">URI</spanx>
                element expect for <spanx style="verb">http://oauth.net/core/1.0/endpoint/resource</spanx>
                which MUST NOT.
              </t>
              <t hangText="&lt;oauth:HttpMethod&gt;">
                0 or 1 per <spanx style="verb">Service</spanx> element with
                type <spanx style="verb">xs:string</spanx>.
                <spanx style="verb">oauth:HttpMethod</spanx> elements MUST
                be present and have a non-empty value when, and only when, the
                <spanx style="verb">URI</spanx> element is non-empty, except
                for <spanx style="verb">http://oauth.net/core/1.0/endpoint/authorize</spanx>
                which MUST NOT have an <spanx style="verb">oauth:HttpMethod</spanx>
                element. The value is the HTTP method used to request the URL
                provided in the <spanx style="verb">URI</spanx> element. The
                <spanx style="verb">oauth:HttpMethod</spanx> element supports an
                OPTIONAL <spanx style="verb">source</spanx> attribute with type
                <spanx style="verb">xs:anyURI</spanx> which indicates the source of
                the HTTP method definition. If omitted, the
                <spanx style="verb">source</spanx> attribute defaults to
                <spanx style="verb">http://www.ietf.org/rfc/rfc2616</spanx>
                which enables using the methods defined in <xref target="RFC2616" />
                as values for the <spanx style="verb">oauth:HttpMethod</spanx>
                element: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, and CONNECT.
              </t>
              <t hangText="&lt;oauth:CustomParameters&gt;">
                0 or 1 per <spanx style="verb">Service</spanx> element as
                defined in <xref target="custom_param_element" />. MUST NOT
                appear with services of type
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/access</spanx>.
              </t>
              <t hangText="&lt;oauth:RequestParameterMethods&gt;">
                0 or 1 per <spanx style="verb">Service</spanx> element as
                defined in <xref target="request_param_element" />.
                MUST be included in <spanx style="verb">Service</spanx>
                elements for the OAuth Endpoints, if the parent Realm
                Definition does not contain an
                <spanx style="verb">oauth:RequestParameterMethods</spanx> element.
              </t>
              <t hangText="&lt;oauth:RequestSignature&gt;">
                0 or 1 per <spanx style="verb">Service</spanx> element as
                defined in <xref target="req_sig_element" />. REQUIRED if
                the parent Realm Definition does not contain an
                <spanx style="verb">oauth:RequestSignature</spanx>
                element and the service type is
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/request</spanx>,
                <spanx style="verb">http://oauth.net/core/1.0/endpoint/access</spanx>,
                or <spanx style="verb">http://oauth.net/core/1.0/endpoint/resource</spanx>.
              </t>
            </list>
          </t>
        </section>

        <section title="oauth:CustomParameters Element" anchor="custom_param_element">
          <t>
            The <spanx style="verb">oauth:CustomParameters</spanx> element is
            used to document Service Provider specific request parameters.
            Since <xref target="OAuth Core 1.0" /> allows Service Providers to
            extent the list of parameters, the element provides the ability to
            list the parameters added. The element MUST NOT include OAuth
            Protocol Parameters or parameters implicitly defined by the
            inclusion of a service extension via a <spanx style="verb">Type</spanx>
            element as defined in <xref target="extensions" />.
          </t>
          <t>
            The <spanx style="verb">oauth:CustomParameters</spanx> element
            contains 1 or more <spanx style="verb">oauth:Parameter</spanx>
            elements with type <spanx style="verb">xs:string</spanx>. The
            element MUST contain a <spanx style="verb">source</spanx> attribute
            with type <spanx style="verb">xs:anyURI</spanx> which indicates the
            source of the parameter definition.
        </t>
        </section>

        <section title="oauth:RequestParameterMethods Element" anchor="request_param_element">
          <t>
            The <spanx style="verb">oauth:RequestParameterMethods</spanx> element is
            used to document the request parameters methods supported by the
            Service Provider as defined in <xref target="OAuth Core 1.0" /> section 5.2.
            Since <xref target="OAuth Core 1.0" /> allows Service Providers to extent the
            list of supported methods, the element provides the ability to add
            methods that were not listed in the specification.
          </t>
          <t>
            The <spanx style="verb">oauth:RequestParameterMethods</spanx> element
            contains 1 or more <spanx style="verb">oauth:Method</spanx>
            elements with type <spanx style="verb">xs:string</spanx> listed in
            decreasing preference. While <xref target="OAuth Core 1.0" /> declares an
            order of preference, Service Providers MAY choose to override it,
            for example when adding new methods.
          </t>
          <t>
            The <spanx style="verb">oauth:Method</spanx> element supports an
            OPTIONAL <spanx style="verb">source</spanx> attribute with type
            <spanx style="verb">xs:anyURI</spanx> which indicates the source of
            the method definition. If omitted, the
            <spanx style="verb">source</spanx> attribute defaults to
            <spanx style="verb">http://oauth.net/core/1.0</spanx> which enables
            using the methods defined in <xref target="OAuth Core 1.0" /> as values for
            the <spanx style="verb">oauth:Method</spanx> element: AUTH-HEADER,
            POST-BODY, and URL-QUERY.
          </t>
          <t>
            The <spanx style="verb">oauth:RequestParameterMethods</spanx> element MAY
            be used in both the Realm Definition and
            <spanx style="verb">Service</spanx> elements. If present in both,
            the values of the child element are applied to the values of the
            parent element based on the OPTIONAL
            <spanx style="verb">append</spanx> attribute of the child's
            <spanx style="verb">oauth:RequestParameterMethods</spanx> element as
            defined in <xref target="append_attribute" />.
          </t>
        </section>

        <section title="oauth:RequestSignature Element" anchor="req_sig_element">
          <t>
            The <spanx style="verb">oauth:RequestSignature</spanx> element is
            used to document the signature methods supported by the Service
            Provider as defined in <xref target="OAuth Core 1.0" /> section 9. Since
            <xref target="OAuth Core 1.0" /> allows Service Providers to extent the
            list of supported methods, the element provides the ability to add
            methods that were not listed in the specification.
          </t>
          <t>
            The <spanx style="verb">oauth:RequestSignature</spanx> element
            contains 1 or more <spanx style="verb">oauth:Method</spanx>
            elements with type <spanx style="verb">xs:string</spanx> listed in
            decreasing preference.
          </t>
          <t>
            The <spanx style="verb">oauth:Method</spanx> element supports an
            OPTIONAL <spanx style="verb">source</spanx> attribute with type
            <spanx style="verb">xs:anyURI</spanx> which indicates the source of
            the signature method definition. If omitted, the
            <spanx style="verb">source</spanx> attribute defaults to
            <spanx style="verb">http://oauth.net/core/1.0</spanx> which enables
            using the methods defined in <xref target="OAuth Core 1.0" /> as values for
            the <spanx style="verb">oauth:Method</spanx> element: HMAC-SHA1,
            RSA-SHA1, and PLAINTEXT.
          </t>
          <t>
            The <spanx style="verb">oauth:RequestSignature</spanx> element MAY
            be used in both the Realm Definition and
            <spanx style="verb">Service</spanx> elements. If present in both,
            the values of the child element are applied to the values of the
            parent element based on the OPTIONAL
            <spanx style="verb">append</spanx> attribute of the child's
            <spanx style="verb">oauth:RequestSignature</spanx> element as
            defined in <xref target="append_attribute" />.
          </t>
        </section>

        <section title="Append Attribute" anchor="append_attribute">
          <t>
            The <spanx style="verb">append</spanx> attribute with type
            <spanx style="verb">xs:string</spanx> defines how two configuration
            lists are merged together into a single list in decreasing
            preference order. If the attribute is supported but omitted, it
            defaults to <spanx style="verb">override</spanx>. The attribute
            values are:

            <list style="hanging">
              <t hangText="override">
                Only the child's values are used. The parent's values are
                ignored.
              </t>
              <t hangText="head">
                The values of the child and parent are merged with any
                duplicates removed from the parent's list. Preference is
                given to the child's values in their order and then to the
                remaining parent's values in their order. Child's values MAY be
                prefixed with an '!' character (ASCII code 33) indicating the
                value MUST be removed from both parent and child lists.
              </t>
              <t hangText="tail">
                The values of the child and parent are merged with any
                duplicates removed from the child's list. Preference is
                given to the parent's values in their order and then to the
                remaining child's values in their order. Child's values MAY be
                prefixed with an '!' character (ASCII code 33) indicating the
                value MUST be removed from both parent and child lists.
              </t>
            </list>
          </t>
        </section>

        <section title="Service Extensions" anchor="extensions">
          <t>
            OAuth extensions MAY define additional service type URIs used to
            indicate support or property of an existing service type, or as
            a standalone service. The following example demonstrate using the
            <spanx style="verb">http://oauth.net/example/language/1.0</spanx>
            URI to indicate the authorization endpoint supports a language
            parameter extension:

            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/core/1.0/endpoint/authorize&lt;/Type&gt;
        &lt;Type&gt;http://oauth.net/example/language/1.0&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/session/login&lt;/URI&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
          <t>
            Extensions to an OAuth Endpoint are OPTIONAL and MAY be used
            by the Consumer if supported. If an extension to an OAuth Endpoint
            is REQUIRED by the Service Provider, it MUST be identified using the
            <spanx style="verb">oauth:required</spanx> attribute. for example:

            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/core/1.0/endpoint/authorize&lt;/Type&gt;
        &lt;Type oauth:required="true"&gt;http://oauth.net/example/language/1.0&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/session/login&lt;/URI&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
          <t>
            In the following example, a new service is defined which provides
            the Service Provider's terms of service:

            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/example/tos/1.0&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/tos&lt;/URI&gt;
        &lt;oauth:HttpMethod&gt;GET&lt;/oauth:HttpMethod&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
          <t>
            The <spanx style="verb">oauth:Method</spanx> and
            <spanx style="verb">oauth:HttpMethod</spanx> elements provide
            extendibility through the <spanx style="verb">source</spanx>
            attribute which also uses URIs to identify the type of extension
            used. If the Consumer is unfamiliar with the value of the
            <spanx style="verb">source</spanx> attribute, it SHOULD look for
            other familiar methods listed. In order to use existing
            specifications that do not define a namespace URI, the official
            specification URL SHOULD be used when possible. For RFCs, the URI
            is the RFC number prefixed by 
            <spanx style="verb">http://www.ietf.org/rfc/rfc</spanx>.
          </t>
          <t>
            In this example, the Service Provider's terms of service
            are available using the WebDAV HTTP method
            <spanx style="verb">PROPFIND</spanx>:

            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/example/tos/1.0&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/tos&lt;/URI&gt;
        &lt;oauth:HttpMethod source="http://www.ietf.org/rfc/rfc4918"&gt;PROPFIND&lt;/oauth:HttpMethod&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
        </section>

        <section title="Parsing Process">
          <t>
            Parsing the Discovery Definition Document includes the following
            steps:
            
            <list style="numbers">
              <t>
                Find the Realm Definition for the Resource Realm - 
                When parsing a Discovery Definition Document, the Consumer MUST
                find a Realm Definition with an exact match to the Resource Realm
                by comparing it to the value of the
                <spanx style="verb">Query</spanx> element. If no match is
                found, the Consumer looks for a Realm Definition without a
                <spanx style="verb">Query</spanx> element. If none found, or
                if the Realm Definition is incomplete, invalid, or expired,
                discovery fails.
              </t>
              <t>
                Follow one level of references - If the Realm Definition contains an
                <spanx style="verb">oauth:Reference</spanx> element, the Consumer
                MUST perform discovery on the referenced Realm value per
                <xref target="yadis" />, retrieve the Discovery Definition Document,
                and locate the referenced Realm by looking for an exact match. The
                referenced Realm MUST NOT contain another
                <spanx style="verb">oauth:Reference</spanx> element, and if it
                does, the Consumer MUST NOT retrieve it and discovery fails.
                Catch-all Realm Definitions do not match against a referenced Realm.
                Using a reference does not change the Protected Resource Realm
                association.
              </t>
              <t>
                Identify the User Realm and Consumer Realm - If the Realm
                Definition does not include <spanx style="verb">oauth:Realm</spanx>
                elements for User Realm or Consumer Realm, they default to the
                value of the Resource Realm. Otherwise, the Consumer MUST use
                the <spanx style="verb">oauth:Realm</spanx> element with highest
                priority for each Realm type. If using the highest priority Realm
                ends in failed discovery, the Consumer SHOULD attempt to use
                the next Realm in priority order, and repeat until successful or
                tried all Realms.
              </t>
              <t>
                Retrieve the Realm Definition for the User Realm and Consumer
                Realm - If the Realms are not identical to the Resource Realm,
                the Consumer MUST perform discovery on the identified Realms
                following the same workflow as the Resource Realm discovery.
                If the Realm Definition referenced contains other
                <spanx style="verb">oauth:Realm</spanx> elements, they MUST be
                ignored.
              </t>
              <t>
                Find the endpoints configuration - Using the Realm Definition
                the Consumer locates the <spanx style="verb">Service</spanx>
                element with the highest priority for each endpoint. If for any
                reason the Consumer cannot use the discovered configuration
                (for example in case of an unknown signature method) or fails
                to use it, it SHOULD look for the
                <spanx style="verb">Service</spanx> element with the next
                highest priority for that service type. Consumers SHOULD
                repeat this process until successful or all
                <spanx style="verb">Service</spanx> elements have been tried.
              </t>
            </list>
          </t>
        </section>
        
      </section>

      <section title="Establish Consumer Identity">
        <t>
          The Consumer SHOULD check to see if it already has a valid Consumer
          Identity for the discovered Consumer Realm of the Protected Resource.
          If true, the Consumer MAY use that identity. In this case, the
          Consumer does not need to discover or parse the Realm Definition of
          the Consumer Realm.
        </t>
        <t>
          If the Consumer does not have a valid Consumer Identity, it MUST use
          the discovered information contained in the Realm Definition of the
          Consumer Realm to obtain an identity.
        </t>
        <t>
          <xref target="OAuth Core 1.0" /> requires Consumers to establish an
          Consumer Identity prior to making OAuth requests, and leaves the
          methods of establishing the Consumer Identity unspecified. The process
          of establishing a Consumer Key and Consumer Secret can be complex
          and can also require manual human interaction for legal, compliance,
          and other reasons. However, there are some cases in which a simple
          Consumer Identity is sufficient or not needed at all.
        </t>
        <t>
          OAuth Discovery defines three Consumer Identity allocation scenarios:
          static, dynamic, and manual.
        </t>

        <section title="Static Allocation">
          <t>
            Static Consumer Identity allocation is used when no Consumer Identity is
            needed. In this case the Service Provider does not desire
            tracking individual Consumers, or might provide limited
            accessibility to unidentified Consumers. In this scenario, the
            Service Provider assigns a default Consumer Identity in the
            Realm Definition of the Consumer Realm.
          </t>
          <t>
            Static allocation is identified using the service type URI:
            <spanx style="verb">http://oauth.net/discovery/1.0/consumer-identity/static</spanx>.
            The Realm Definition MUST include a <spanx style="verb">Service</spanx>
            element with the type URI and an <spanx style="verb">oauth:ConsumerKey</spanx>
            element with the Consumer Key encoded per <xref target="OAuth Core 1.0" />
            section 5.1. Static allocation does not include a Consumer Secret
            which is an empty string. For example:
            
            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/discovery/1.0/consumer-identity/static&lt;/Type&gt;
        &lt;oauth:ConsumerKey&gt;0685bd9184jfhq22&lt;/oauth:ConsumerKey&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
        </section>

        <section title="Dynamic Allocation">
          <t>
            Dynamic Consumer Identity allocation is used when a basic Consumer profile is
            needed. The Service Provider allows Consumer to automatically apply
            and receive a Consumer Identity by providing some information. In
            this scenario, the Service Provider provides an endpoint the
            Consumer uses to request a Consumer Identity with a simple set of
            parameters to establish identity.
          </t>
          <t>
            
          </t>
          <t>
            Dynamic allocation is identified using the service type URI:
            <spanx style="verb">http://oauth.net/discovery/1.0/consumer-identity/dynamic</spanx>.
            The Realm Definition MUST include a <spanx style="verb">Service</spanx>
            element with the type URI, <spanx style="verb">URI</spanx> element, and
            <spanx style="verb">oauth:HttpMethod</spanx> element. The
            <spanx style="verb">Service</spanx> element MAY include the OPTIONAL
            <spanx style="verb">oauth:RequestParameterMethods</spanx> and
            <spanx style="verb">oauth:CustomParameters</spanx> elements. The
            HTTP response of the request uses <xref target="OAuth Core 1.0" />
            section 5.3 and include the <spanx style="verb">oauth_consumer_key</spanx>
            and <spanx style="verb">xoauth_consumer_secret</spanx> parameters.
            For example:

            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/discovery/1.0/consumer-identity/dynamic&lt;/Type&gt;
        &lt;URI&gt;http://sp.example.com/register&lt;/Type&gt;
        &lt;oauth:HttpMethod&gt;GET&lt;/oauth:HttpMethod&gt;
        &lt;oauth:RequestParameter&gt;
          &lt;oauth:Method&gt;URL-QUERY&lt;/oauth:Method&gt;
        &lt;/oauth:RequestParameter&gt;
        &lt;oauth:CustomParameters&gt;
          &lt;oauth:Parameter source="http://oauth.net/example/consumer_identity&gt;name&lt;/oauth:Parameter&gt;
          &lt;oauth:Parameter source="http://oauth.net/example/consumer_identity&gt;description&lt;/oauth:Parameter&gt;
          &lt;oauth:Parameter source="http://oauth.net/example/consumer_identity&gt;url&lt;/oauth:Parameter&gt;
        &lt;/oauth:CustomParameters&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
        </section>

        <section title="Manual Allocation">
          <t>
            Manual Consumer Identity allocation is used when the Service Provider requires
            a Consumer registration process that cannot be performed
            automatically or has unique requirements the Consumer Developer needs
            to address. OAuth Discovery does not address this scenario expect
            for enabling the Service Provider to provide a human-readable
            endpoint, and associating Consumer Identities obtained via that
            endpoint to a Consumer Realm. This allows Consumer to use OAuth
            Discovery with manually pre-established Consumer Identities.
            Type:
          </t>
          <t>
            Manual allocation is identified using the service type URI:
            <spanx style="verb">http://oauth.net/discovery/1.0/consumer-identity/manual</spanx>.
            The Realm Definition MUST include a <spanx style="verb">Service</spanx>
            element with the type URI, <spanx style="verb">URI</spanx> element, and
            <spanx style="verb">oauth:HttpMethod</spanx> element. The result value
            of the request is undefined. For example:
            
            <figure>
              <artwork>
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/discovery/1.0/consumer-identity/manual&lt;/Type&gt;
        &lt;URI&gt;http://sp.example.com/consumer_apply&lt;/Type&gt;
        &lt;oauth:HttpMethod&gt;GET&lt;/oauth:HttpMethod&gt;
      &lt;/Service&gt;
              </artwork>
            </figure>
          </t>
        </section>

        <section title="Complex Consumer Realm">
          <t>
            In cases where a Service Provider offers multiple Consumer Realms,
            and allows access to its Protected Resources using different
            combinations of those Realms, the Service Provider MAY include
            multiple Consumer Realms per Resource Realm. The Service Provider
            MAY also include multiple Consumer Identity services for a single
            Consumer Realm, allowing Consumers to use one of multiple methods
            to obtain a Consumer Identity.
          </t>
        </section>
    
      </section>

      <section title="Establish User Access">
        <t>
          The Consumer SHOULD check to see if it already has a valid Access
          Token for the discovered User Realm of the Protected Resource. If
          true, the Consumer MAY use that Token together with the Consumer
          Identity established in the previous step to access the Protected
          Resource. In this case, the Consumer does not need to discover or
          parse the Realm Definition of the User Realm.
        </t>
        <t>
          If the Consumer does not have a valid Access Token, it MUST use the
          discovered information contained in the Realm Definition of the User
          Realm to perform the OAuth protocol and obtain access. The Realm
          Definition contains all the documentation required to successfully
          complete the Oauth workflow.
        </t>
      </section>
      
    </section>

    <appendix title="Appendix A - Examples">
      <t>
        The examples in this section demonstrate some of the capabilities of
        the OAuth Discovery and try to provide a usable template for both
        simple and complex scenarios.
      </t>

      <appendix title="Simple Discovery Definition Document">
        <t>
          This example demonstrate a Discovery Definition Document where
          the Resource Realm contains the services configuration for both
          the User Realm and Consumer Realm. The Service Provider also
          support static Consumer Identity allocation.

          <figure>
            <artwork>
  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;XRDS xmlns="xri://$xrds"&gt;
    &lt;XRD xmlns:oauth="http://oauth.net/discovery/1.0" xmlns="xri://$xrd*($v*2.0)"&gt;
      &lt;Query&gt;http://api.example.com/&lt;/Query&gt;
      &lt;Expires&gt;2007-12-31T23:59:59Z&lt;/Expires&gt;
      &lt;oauth:RequestParameterMethods&gt;
        &lt;oauth:Method&gt;AUTH-HEADER&lt;/oauth:Method&gt;
        &lt;oauth:Method&gt;POST-BODY&lt;/oauth:Method&gt;
        &lt;oauth:Method&gt;URL-QUERY&lt;/oauth:Method&gt;
      &lt;/oauth:RequestParameterMethods&gt;
      &lt;oauth:RequestSignature&gt;
        &lt;oauth:Method&gt;HMAC-SHA1&lt;/oauth:Method&gt;
      &lt;/oauth:RequestSignature&gt;
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/core/1.0/endpoint/request&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/session/request&lt;/URI&gt;
        &lt;oauth:HttpMethod&gt;POST&lt;/oauth:HttpMethod&gt;
        &lt;oauth:RequestSignature append="head"&gt;
          &lt;oauth:Method&gt;PLAINTEXT&lt;/oauth:Method&gt;
        &lt;/oauth:RequestSignature&gt;
      &lt;/Service&gt;
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/core/1.0/endpoint/authorize&lt;/Type&gt;
        &lt;URI&gt;https://api.example.com/session/login&lt;/URI&gt;
        &lt;oauth:RequestParameterMethods append="override"&gt;
          &lt;oauth:Method&gt;URL-QUERY&lt;/oauth:Method&gt;
        &lt;/oauth:RequestParameterMethods&gt;
      &lt;/Service&gt;
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/core/1.0/endpoint/access&lt;/Type&gt;
        &lt;oauth:HttpMethod&gt;POST&lt;/oauth:HttpMethod&gt;
        &lt;URI&gt;https://api.example.com/session/activate&lt;/URI&gt;
        &lt;oauth:RequestSignature append="head"&gt;
          &lt;oauth:Method&gt;PLAINTEXT&lt;/oauth:Method&gt;
        &lt;/oauth:RequestSignature&gt;
      &lt;/Service&gt;
      &lt;Service&gt;
        &lt;Type&gt;http://oauth.net/discovery/1.0/consumer-identity/static&lt;/Type&gt;
        &lt;oauth:ConsumerKey&gt;0685bd9184jfhq22&lt;/oauth:ConsumerKey&gt;
      &lt;/Service&gt;
    &lt;/XRD&gt;
  &lt;/XRDS&gt;
            </artwork>
          </figure>
        </t>
      </appendix>
      
    </appendix>

  </middle>

  <back>

    <references title="References">

      <reference anchor="OAuth Core 1.0">
        <front>
          <title>OAuth Core 1.0</title>
          <author initials="OCW" surname="OAuth" fullname="OAuth Core Workgroup">
            <organization />
          </author>
        </front>
        <format type="HTML" target="http://oauth.net/core/1.0" />
      </reference>

      <reference anchor="RFC2606">
        <front>
          <title>Reserved Top Level DNS Names</title>
          <author initials="D.E" surname="Eastlake" fullname="D. Eastlake">
            <organization></organization>
          </author>
          <author initials="A.P" surname="Panitz" fullname="A. Panitz">
            <organization></organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2606" />
      </reference>

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="B.S" surname="Bradner" fullname="Scott Bradner">
            <organization>Alis Technologies</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2119" />
      </reference>
      <reference anchor="SHA1">
        <front>
          <title>Finding SHA-1 Characteristics: General Results and Applications</title>
          <author initials="C.DC" surname="De Canniere" fullname="Christophe De Canniere">
            <organization />
          </author>
          <author initials="C.R" surname="Rechberger" fullname="Christian Rechberger">
            <organization />
          </author>
        </front>
        <format type="HTML" target="http://dx.doi.org/10.1007/11935230_1" />
      </reference>

      <reference anchor="RFC2616">
        <front>
          <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
          <author initials="R.F" surname="Fielding" fullname="R. Fielding">
            <organization>UC Irvine</organization>
          </author>
          <author initials="J.G" surname="Gettys" fullname="J. Gettys">
            <organization>Compaq/W3C</organization>
          </author>
          <author initials="J.M" surname="Mogul" fullname="J. Mogul">
            <organization>Compaq</organization>
          </author>
          <author initials="H.F" surname="Frystyk" fullname="H. Frystyk">
            <organization>W3C/MIT</organization>
          </author>
          <author initials="L.M" surname="Masinter" fullname="L. Masinter">
            <organization>Xerox</organization>
          </author>
          <author initials="P.L" surname="Leach" fullname="P. Leach">
            <organization>Microsoft</organization>
          </author>
          <author initials="T.L" surname="Berners-Lee" fullname="T. Berners-Lee">
            <organization>W3C/MIT</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2616" />
      </reference>

      <reference anchor="RFC2617">
        <front>
          <title>
            HTTP Authentication: Basic and Digest Access Authentication
          </title>
          <author initials="J.F" surname="Franks" fullname="J. Franks">
            <organization />
          </author>
          <author initials="P.HB" surname="Hallam-Baker" fullname="P. Hallam-Baker">
            <organization />
          </author>
          <author initials="J.H" surname="Hostetler" fullname="J. Hostetler">
            <organization />
          </author>
          <author initials="S.L" surname="Lawrence" fullname="S. Lawrence">
            <organization />
          </author>
          <author initials="P.L" surname="Leach" fullname="P. Leach">
            <organization />
          </author>
          <author initials="A.L" surname="Luotonen" fullname="A. Luotonen">
            <organization />
          </author>
          <author initials="L.S" surname="Stewart" fullname="L. Stewart">
            <organization />
          </author>
        </front>
        <seriesInfo name="RFC" value="2617" />
      </reference>
      
      <reference anchor="XRI Resolution 2.0" target="http://www.oasis-open.org/committees/download.php/17293" >
        <front>
          <title>Extensible Resource Identifier (XRI) Resolution V2.0 - Committee Draft 02</title>
          <author initials='G.W' surname='Wachob' fullname="Gabe Wachob">
            <organization>Visa International</organization>
          </author>
          <author initials='D.R' surname='Reed' fullname="Drummond Reed">
            <organization>Cordance</organization>
          </author>
          <author initials='L.C' surname='Chasen' fullname="Les Chasen">
            <organization>NeuStar</organization>
          </author>
          <author initials='W.T' surname='Tan' fullname="William Tan">
            <organization>NeuStar</organization>
          </author>
          <author initials='S.C' surname='Churchill' fullname="Steve Churchill">
            <organization>XDI.ORG</organization>
          </author>
        </front>
        <format type="HTML" target="http://docs.oasis-open.org/xri/2.0/specs/cd02/xri-resolution-V2.0-cd-02.html" />
        <format type="PDF" target="http://docs.oasis-open.org/xri/2.0/specs/cd02/xri-resolution-V2.0-cd-02.pdf" />
      </reference>

    </references>
  </back>

</rfc>
