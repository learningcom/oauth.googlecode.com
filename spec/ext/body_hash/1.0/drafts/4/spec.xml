<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<rfc category="info" ipr="full3978" docName="oauth-body_hash-1_0.xml">

  <?rfc toc="yes" ?>
  <?rfc tocdepth="3" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc strict="yes" ?>
  <?rfc iprnotified="no" ?>
  <?rfc private="Implementers' Draft" ?>

  <front>
    <title>OAuth Request Body Hash 1.0 Draft 4</title>

    <author initials="B" surname="Eaton" fullname="Brian Eaton">
      <organization>Google, Inc</organization>
      <address>
        <email>beaton@google.com</email>
      </address>
    </author>

    <date day="23" month="March" year="2009"/>

    <abstract>
      <t>
        This specification extends the OAuth signature to include
        integrity checks on HTTP request bodies with content types other than
        <spanx style="verb">application/x-www-form-urlencoded</spanx>.
      </t>
    </abstract>

  </front>
  <middle>

    <section title="Notation and Conventions">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in
        <xref target="RFC2119" />.
      </t>
      <t>
        Unless otherwise noted, this specification is written as a direct
        continuation of <xref target="OAuth Core 1.0" />, inheriting the
        definitions and guidelines set by it.
      </t>
    </section>

    <section title="Introduction">
      <t>
        The OAuth Core specification <xref target="OAuth Core 1.0" /> provides
        body integrity checking only for
        <spanx style="verb">application/x-www-form-urlencoded</spanx>
        request bodies.  Other types of request bodies are left unsigned.
        An eavesdropper or man-in-the-middle who captures a signed request URL
        may be able to forward or replay that URL with a different HTTP
        request body.  Nonce checking and the use of https can mitigate this
        risk, but may not be available or effective in some environments.
      </t>
      <t>
        This specification describes a method to provide an integrity check
        on the request body without requiring signatures of arbitrary byte
        streams.  An unkeyed hash of the request body is taken, the
        resulting hash value is added to the list of OAuth parameters,
        and the normal OAuth signature base string is signed.
      </t>
      <t>
        This extension is forward compatible: Service Providers
        that have not implemented this extension can verify requests
        sent by Consumers that have implemented this extension.
        If the Service Provider
        implements this specification the integrity of the body is guaranteed.
        If the Service Provider does not check body signatures, the remainder
        of the request will still validate using the OAuth Core signature
        algorithm.
      </t>
      <t>
        This specification is only useful when cryptographic signatures
        are used.  The OAuth PLAINTEXT signature algorithm does not provide
        integrity checks for any portion of the request.
      </t>
    </section>

    <section title="The oauth_body_hash Parameter" anchor="parameter">
      <t>
        The body hash parameter MUST NOT be sent on requests that use
        the application/x-www-form-urlencoded content-type.  The body
        hash parameter MUST NOT be sent on HTTP GET or HEAD requests.
        The body hash parameter SHOULD be sent on all other requests.
      </t>
      <section title="Hash Algorithm">
        <t>
          The body hash algorithm is determined by the OAuth signature
          method used.
        </t>
        <t>
          <list style="symbols">
            <t>
              If the OAuth signature method is HMAC-SHA1 or RSA-SHA1, SHA1
              <xref target="RFC3174" /> MUST be used as the body hash
              algorithm.
            </t>
            <t>
              If the OAuth signature method is PLAINTEXT, use of this
              specification provides no security benefit and is NOT
              RECOMMENDED.
            </t>
          </list>
        </t>
        <t>
          New OAuth signature methods SHOULD specify the hash algorithm
          used to generate the body hash.
        </t>
      </section>
      <section title="Signing the Request" anchor="signing">
        <t>
          To sign a request, the OAuth Consumer MUST:
        </t>
        <t>
          <list style="numbers">
            <t>
              Calculate the body hash value by executing the selected
              hash algorithm over the request body.  The request body is
              the Entity Body as defined in <xref target="RFC2616" />
              section 7.2.  If the request does not have an entity body, the
              hash should be taken over the empty string.
            </t>
            <t>
              Base64 <xref target="RFC2045" /> encode the hash value.
            </t>
            <t>
              Set the oauth_body_hash parameter to the Base64 encoded
              hash value.
            </t>
            <t>
              Sign the request as per section 9 "Signing Request" of
              <xref target="OAuth Core 1.0" />.
              The oauth_body_hash parameter is
              included in the Signature Base String together with the
              other request parameters.
            </t>
            <t>
              Include the oauth_body_hash parameter along with the other
              OAuth Protocol parameters in the signed OAuth request.
            </t>
          </list>
        </t>
      </section>
      <section title="Verifying the Request">
        <t>
          Service Providers verify the integrity of request bodies
          by verifying the OAuth signature as described in
          <xref target="OAuth Core 1.0" />.
          and also verifying the value of the
          oauth_body_hash OAuth protocol parameter.
        </t>
        <t>
          <list style="numbers">
            <t>
              Verify the request as described in OAuth Core.
            </t>
            <t>
              Determine whether the request should have an oauth_body_hash
              parameter according to the rules described in
              <xref target="parameter">The oauth_body_hash Parameter</xref>.
            </t>
            <t>
              If the request should not have an oauth_body_hash parameter,
              verify that no oauth_body_hash parameter is present.
              If an oauth_body_hash parameter is present on a request that
              should not contain an oauth_body_hash parameter, the request
              has been tampered with and MUST be rejected.
            </t>
            <t>
              If the request should have an oauth_body_hash parameter
              but does not contain one, the request was sent by a
              Consumer that does not support this extension.  Service
              Providers MAY accept such requests for interoperability, or they
              MAY reject such requests in favor of security.
            </t>
            <t>
              The request contains an oauth_body_hash parameter
              and body that should be hashed.  Calculate the expected body
              hash for the request as described in
              <xref target="signing">Signing the Request</xref>.
            </t>
            <t>
              Compare the calculated body hash with the value sent by the
              client in the oauth_body_hash parameter.  If the values match,
              the body is intact and the request can proceed.
              (Rather than comparing text values, Service Providers MAY
              base64 decode the oauth_body_hash parameter and perform the
              comparison on the octets of the hash.  This reduces the risk of
              minor differences in URL encoding or base64 encoding causing
              spurious integrity check failures.)
            </t>
          </list>
        </t>
        <t>
          To summarize, Service Providers may encounter any of the following
          situations:
          <list style="symbols">
            <t>
              Request should not have oauth_body_hash, no oauth_body_hash
              is present: no additional checks are necessary.
            </t>
            <t>
              Request should not have oauth_body_hash, oauth_body_hash
              is present: reject request.
            </t>
            <t>
              Request should have oauth_body_hash, no oauth_body_hash
              is present:
              Consumer does not support extension.  Service Provider may
              or may not reject request, according to local security policy.
            </t>
            <t>
              Request should have oauth_body_hash, oauth_body_hash is present:
              Verify the body hash.
            </t>
          </list>
        </t>
      </section>
    </section>
    <section title="Example">
      <t>
        Sample HTTP request:
        <figure>
          <artwork>
  PUT /resource HTTP/1.1
  Host: www.example.com
  Content-Type: text/plain
  Content-Length: 12

  Hello World!
          </artwork>
        </figure>
      </t>
      <t>
        Base64 encoded SHA-1 hash of the body:
        <figure>
          <artwork>
  Lve95gjOVATpfV8EL5X4nxwjKHE=
          </artwork>
        </figure>
      </t>
      <t>
        Signature Base String (with some line breaks added for
        readability):
        <figure>
          <artwork>
  PUT&amp;http%3A%2F%2Fwww.example.com%2Fresource&amp;oauth_body_hash%3D
  Lve95gjOVATpfV8EL5X4nxwjKHE%253D%26oauth_consumer_key%3Dconsum
  er%26oauth_nonce%3D10369470270925%26oauth_signature_method%3DH
  MAC-SHA1%26oauth_timestamp%3D1236874236%26oauth_version%3D1.0
          </artwork>
        </figure>
      </t>
      <t>
        Signed request with body hash (with some line breaks added for
        readability):
        <figure>
          <artwork>
  PUT /resource HTTP/1.1
  Host: www.example.com
  Authorization: OAuth realm="http%3A%2F%2Fwww.example.com",
      oauth_body_hash="Lve95gjOVATpfV8EL5X4nxwjKHE%3D",
      oauth_consumer_key="consumer",
      oauth_signature_method="HMAC-SHA1",
      oauth_timestamp="1236874155", oauth_nonce="10288510250934",
      oauth_version="1.0",
      oauth_signature="08bUFF%2Fjmp59mWB7cSgCYBUpJ0U%3D"
  Content-Type: text/plain
  Content-Length: 12

  Hello World!
          </artwork>
        </figure>
      </t>
    </section>

    <section title="Security Considerations">
      <t>
        Many factors besides the bytes of the request body can
        influence the interpretation of the body of the HTTP
        request.  For example, a content-type or content-encoding
        header can change the way a server handles an HTTP request.
        This specification does not include an integrity check
        on the HTTP request headers.  OAuth deployments whose
        security could be impacted by an attacker who tampers with
        HTTP request headers should use other mechanisms (such as HTTPS)
        to protect the confidentiality and integrity of the entire HTTP
        request.
      </t>
    </section>

    <appendix title="Obtaining the HTTP Entity Body">
      <t>
        Not all programming platforms provide an easy mechanism to obtain
        the raw octets of the HTTP entity body.  Reading the entity body
        as raw octets may have side effects, such as inhibiting automatic
        character set conversion.  Transfer-encodings such as gzip
        also complicate implementation.  On the other hand,
        reading the entity body as text may perform lossy conversions
        that prevent recovery of the original octet stream in some
        situtations.  Character set conversions are not always one-to-one
        mappings, so solutions that rely on converting text back to the
        original octet stream are likely to fail in environments with
        multibyte characters.
      </t>
      <t>
        All of these factors, and others, can make it difficult to drop in a
        "verify-the-signature" filtering layer prior to other request
        processing.  The verification layer must consider the assumptions
        of downstream processing code on the state of the request body.
      </t>
      <t>
        Implementers of this specification should be aware of these
        difficulties and consider the best way to address them in their
        programming frameworks.
      </t>
    </appendix>

    <appendix title="Unkeyed vs Keyed Hash Algorithms">
      <t>
        This specification deliberately uses an unkeyed hash algorithm
        (SHA-1) to provide an integrity check on the body instead of
        a keyed hash algorithm such as HMAC-SHA1.  This decision was made
        because signing arbitrary octet streams is poor cryptographic hygiene.
        It can lead to unexpected problems with cryptographic protocols.
      </t>
      <t>
        For example, consider a proxy that uses OAuth to add authentication
        information to requests sent by an untrusted third-party.  If the
        proxy signs arbitrary octet streams, the third-party can use the
        proxy as an oracle to forge authentication messages.
      </t>
      <t>
        Including the result of an unkeyed hash in the normal signature 
        base string allows the proxy to add an integrity check on the
        original message without creating a signing oracle.
      </t>
    </appendix>
  </middle>

  <back>

    <references title="References">

      <reference anchor="OAuth Core 1.0">
        <front>
          <title>OAuth Core 1.0</title>
          <author initials="" surname="OAuth Core Workgroup" fullname="OAuth Core Workgroup">
            <organization />
          </author>
        </front>
        <format type="HTML" target="http://oauth.net/core/1.0" />
      </reference>

      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="B.S" surname="Bradner" fullname="Scott Bradner">
            <organization>Alis Technologies</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="RFC2045">
        <front>
          <title>Multipurpose Internet Mail Extensions (MIME) Part One: Format of Internet Message Bodies</title>
          <author initials="N.F" surname="Freed" fullname="N. Freed">
            <organization>Innosoft</organization>
          </author>
          <author initials="N.B" surname="Borenstein" fullname="N. Borenstein">
            <organization>First Virtual</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2045" />
      </reference>

      <reference anchor="RFC2616">
        <front>
          <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
          <author initials="R.F" surname="Fielding" fullname="R. Fielding">
            <organization>UC Irvine</organization>
          </author>
          <author initials="J.G" surname="Gettys" fullname="J. Gettys">
            <organization>Compaq/W3C</organization>
          </author>
          <author initials="J.M" surname="Mogul" fullname="J. Mogul">
            <organization>Compaq</organization>
          </author>
          <author initials="H.F" surname="Frystyk" fullname="H. Frystyk">
            <organization>W3C/MIT</organization>
          </author>
          <author initials="L.M" surname="Masinter" fullname="L. Masinter">
            <organization>Xerox</organization>
          </author>
          <author initials="P.L" surname="Leach" fullname="P. Leach">
            <organization>Microsoft</organization>
          </author>
          <author initials="T.L" surname="Berners-Lee" fullname="T. Berners-Lee">
            <organization>W3C/MIT</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="2616" />
      </reference>

      <reference anchor="RFC3174">
        <front>
          <title>US Secure Hash Algorithm 1 (SHA1)</title>
          <author initials="D" surname="Eastlake, 3rd" fullname="Donald E. Eastlake, 3rd">
            <organization>Motorola</organization>
          </author>
          <author initials="P" surname="Jones" fullname="Paul E. Jones">
            <organization>Cisco Systems, Inc.</organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="3174" />
      </reference>
    </references>
  </back>

</rfc>
