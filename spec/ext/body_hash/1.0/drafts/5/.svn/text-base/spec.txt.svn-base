


Implementers' Draft                                             B. Eaton
                                                             Google, Inc
                                                          March 29, 2009


                  OAuth Request Body Hash 1.0 Draft 5













































Eaton                                                           [Page 1]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


Abstract

   This specification extends the OAuth signature to include integrity
   checks on HTTP request bodies with content types other than
   "application/x-www-form-urlencoded".


Table of Contents

   1.  Notation and Conventions . . . . . . . . . . . . . . . . . . .  3
   2.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4
   3.  The oauth_body_hash Parameter  . . . . . . . . . . . . . . . .  5
     3.1.  Hash Algorithm . . . . . . . . . . . . . . . . . . . . . .  5
     3.2.  Calculating the oauth_body_hash Parameter  . . . . . . . .  5
   4.  Additions to Request Signing . . . . . . . . . . . . . . . . .  6
     4.1.  When to Include the Body Hash  . . . . . . . . . . . . . .  6
     4.2.  Adding oauth_body_hash to Requests . . . . . . . . . . . .  6
   5.  Verifying Requests . . . . . . . . . . . . . . . . . . . . . .  8
     5.1.  When to Verify the Hash  . . . . . . . . . . . . . . . . .  8
     5.2.  Verifying the Hash . . . . . . . . . . . . . . . . . . . .  8
   6.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . .  9
     6.1.  Example PUT Request  . . . . . . . . . . . . . . . . . . .  9
   7.  Security Considerations  . . . . . . . . . . . . . . . . . . . 10
     7.1.  Only trust what is signed  . . . . . . . . . . . . . . . . 10
     7.2.  Deprecation of SHA-1 . . . . . . . . . . . . . . . . . . . 10
   Appendix A.  Obtaining the HTTP Entity Body  . . . . . . . . . . . 11
   Appendix B.  Unkeyed vs Keyed Hash Algorithms  . . . . . . . . . . 12
   Appendix C.  Preventing Removal of Request Bodies  . . . . . . . . 13
   8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 14
   Author's Address . . . . . . . . . . . . . . . . . . . . . . . . . 15





















Eaton                                                           [Page 2]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


1.  Notation and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   Unless otherwise noted, this specification is written as a direct
   continuation of [OAuth Core 1.0], inheriting the definitions and
   guidelines set by it.










































Eaton                                                           [Page 3]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


2.  Introduction

   The OAuth Core specification [OAuth Core 1.0] provides body integrity
   checking only for "application/x-www-form-urlencoded" request bodies.
   Other types of request bodies are left unsigned.  An eavesdropper or
   man-in-the-middle who captures a signed request URL may be able to
   forward or replay that URL with a different HTTP request body.  Nonce
   checking and the use of https can mitigate this risk, but may not be
   available in some environments.  Even when nonce checking and https
   are used, signing the request body provides an additional layer of
   defense.

   This specification describes a method to provide an integrity check
   on non-form-encoded request bodies.  The normal OAuth signature base
   string is used by adding an additional parameter with the hash of the
   request body.  An unkeyed hash is used for the reasons described in
   Unkeyed vs Keyed Hash Algorithms (Appendix B).

   This extension is forward compatible: Service Providers that have not
   implemented this extension can verify requests sent by Consumers that
   have implemented this extension.  If the Service Provider implements
   this specification the integrity of the body is guaranteed.  If the
   Service Provider does not check body signatures, the remainder of the
   request will still validate using the OAuth Core signature algorithm.

   This specification is only useful when cryptographic signatures are
   used.  The OAuth PLAINTEXT signature algorithm does not provide
   integrity checks for any portion of the request and is not supported
   by this specification.






















Eaton                                                           [Page 4]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


3.  The oauth_body_hash Parameter

   OAuth Consumers and Service Providers calculate the oauth_body_hash
   according to the following rules:

3.1.  Hash Algorithm

   The body hash algorithm is determined by the OAuth signature method
   used.

   o  If the OAuth signature method is HMAC-SHA1 or RSA-SHA1, SHA1
      [RFC3174] MUST be used as the body hash algorithm.

   o  If the OAuth signature method is PLAINTEXT, use of this
      specification provides no security benefit and is NOT RECOMMENDED.

   New OAuth signature method specifications SHOULD specify the hash
   algorithm used to generate the body hash.

3.2.  Calculating the oauth_body_hash Parameter

   The value of the oauth_body_hash parameter is obtained as follows:

   1.  Calculate the body hash value by executing the selected hash
       algorithm over the request body.  The request body is the entity
       body as defined in [RFC2616] section 7.2.  If the request does
       not have an entity body, the hash should be taken over the empty
       string.

   2.  Base64 [RFC2045] encode the hash value.





















Eaton                                                           [Page 5]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


4.  Additions to Request Signing

   OAuth Consumers implementing this specification continue to sign
   requests in the manner described by OAuth Core.  They also include
   the oauth_body_hash parameter according to the rules described in
   this section.

4.1.  When to Include the Body Hash

   Not all requests should contain the oauth_body_hash parameter.

   OAuth Consumers SHOULD NOT include an oauth_body_hash parameter on
   OAuth request token and access token requests.  Some OAuth Service
   Providers have implemented request token and access token endpoints
   that reject requests that include unknown parameters.  Sending an
   oauth_body_hash parameter to such endpoints will cause protocol
   failures.  The oauth_body_hash parameter does not provide additional
   security for OAuth request and access token requests since all of the
   protocol parameters are signed by the OAuth Core signature mechanism.
   Omitting the parameter improves interoperability without reducing
   security.

   OAuth Consumers MUST NOT include an oauth_body_hash parameter on
   requests with form-encoded request bodies.  The presence or absence
   of the oauth_body_hash parameter is used to indicate to Service
   Providers how they should check the integrity of the request body.
   If no oauth_body_hash parameter is present, that indicates that the
   request body is form-encoded and signed using the OAuth Core
   signature algorithm.  If the oauth_body_hash parameter is present,
   the body is signed according to this extension.  Including an
   oauth_body_hash on form-encoded requests would make it impossible for
   Service Providers to determine which body signing mechanism was used
   for the request.  This ambiguity would, in turn, allow the attack
   described in Preventing Removal of Request Bodies (Appendix C).

   OAuth Consumers SHOULD include the oauth_body_hash parameter on all
   other requests.

4.2.  Adding oauth_body_hash to Requests

   OAuth Consumers use the following procedure to add oauth_body_hash to
   requests:

   1.  Determine whether the parameter should be sent at all, using the
       rules described in When to Include the Body Hash (Section 4.1).

   2.  Calculate the body hash value as described in The oauth_body_hash
       Parameter (Section 3).



Eaton                                                           [Page 6]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


   3.  Set the oauth_body_hash parameter to the obtained value.

   4.  Sign the request as per section 9 "Signing Requests" of [OAuth
       Core 1.0].  The oauth_body_hash parameter MUST be included in the
       Signature Base String together with the other request parameters.

   5.  Include the oauth_body_hash parameter along with the other OAuth
       Protocol parameters in the signed OAuth request.











































Eaton                                                           [Page 7]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


5.  Verifying Requests

   Service Providers verify the integrity of request bodies by verifying
   the OAuth signature as described in [OAuth Core 1.0] and also
   verifying the value of the oauth_body_hash parameter.

5.1.  When to Verify the Hash

   Service Providers SHOULD decide whether the oauth_body_hash parameter
   is necessary according to the rules described in When to Include the
   Body Hash (Section 4.1).

   If the request must not have an oauth_body_hash parameter, Service
   Providers MUST verify that no oauth_body_hash parameter is present.
   In particular, any requests with a form-encoded content-type and an
   oauth_body_hash parameter MUST be rejected because of of the attack
   described in Preventing Removal of Request Bodies (Appendix C).

   If the request should have an oauth_body_hash parameter but does not
   contain one, the request was sent by a Consumer that does not support
   this extension.  The integrity of the request body cannot be checked
   using this specification.  Service Providers MAY accept such requests
   for interoperability, or they MAY reject such requests in favor of
   security.

5.2.  Verifying the Hash

   If the Service Provider determines body hash verification is
   necessary, the Service Provider calculates the expected body hash for
   the request as described in The oauth_body_hash Parameter
   (Section 3).

   The Service Provider then compares the expected body hash with the
   value sent by the Consumer in the oauth_body_hash parameter.  If the
   values match, the body is intact and the request can proceed.

   If the values do not match, the request MUST be rejected.

   Rather than comparing text values, Service Providers MAY Base64
   decode the oauth_body_hash parameter and perform the comparison on
   the octets of the hash.  This reduces the risk of minor differences
   in URL encoding or Base64 encoding causing spurious integrity check
   failures.








Eaton                                                           [Page 8]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


6.  Examples

6.1.  Example PUT Request

   Sample HTTP request:

       PUT /resource HTTP/1.1
       Host: www.example.com
       Content-Type: text/plain
       Content-Length: 12

       Hello World!

   Base64 encoded SHA-1 hash of the body:

       Lve95gjOVATpfV8EL5X4nxwjKHE=

   Signature Base String (with some line breaks added for readability):

       PUT&http%3A%2F%2Fwww.example.com%2Fresource&oauth_body_hash%3D
       Lve95gjOVATpfV8EL5X4nxwjKHE%253D%26oauth_consumer_key%3Dconsum
       er%26oauth_nonce%3D10369470270925%26oauth_signature_method%3DH
       MAC-SHA1%26oauth_timestamp%3D1236874236%26oauth_version%3D1.0

   Signed request with body hash (with some line breaks added for
   readability):

       PUT /resource HTTP/1.1
       Host: www.example.com
       Authorization: OAuth realm="http%3A%2F%2Fwww.example.com",
           oauth_body_hash="Lve95gjOVATpfV8EL5X4nxwjKHE%3D",
           oauth_consumer_key="consumer",
           oauth_signature_method="HMAC-SHA1",
           oauth_timestamp="1236874155", oauth_nonce="10288510250934",
           oauth_version="1.0",
           oauth_signature="08bUFF%2Fjmp59mWB7cSgCYBUpJ0U%3D"
       Content-Type: text/plain
       Content-Length: 12

       Hello World!











Eaton                                                           [Page 9]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


7.  Security Considerations

7.1.  Only trust what is signed

   Many factors besides the bytes of the request body can influence the
   interpretation of the body of the HTTP request.  For example, a
   content-type or content-encoding header can change the way a server
   handles an HTTP request.  This specification does not include an
   integrity check on the HTTP request headers.  OAuth deployments whose
   security could be impacted by an attacker who tampers with HTTP
   request headers should use other mechanisms (such as HTTPS) to
   protect the confidentiality and integrity of the entire HTTP request.

7.2.  Deprecation of SHA-1

   The NIST Computer Security Division has recommended that applications
   stop using SHA-1 for digital signatures [NIST 800-107].  As of the
   time of this writing, all of the cryptographic signature schemes
   defined for OAuth are based on SHA-1.  OAuth signature methods based
   on stronger hash functions need to be developed, and those signature
   methods will need to specify algorithms for calculating the
   oauth_body_hash as well.





























Eaton                                                          [Page 10]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


Appendix A.  Obtaining the HTTP Entity Body

   Not all programming platforms provide an easy mechanism to obtain the
   raw octets of the HTTP entity body.  Reading the entity body as raw
   octets may have side effects, such as inhibiting automatic character
   set conversion.  Transfer-encodings such as gzip also complicate
   implementation.  On the other hand, reading the entity body as text
   may perform lossy conversions that prevent recovery of the original
   octet stream in some situtations.  Character set conversions are not
   always one-to-one mappings, so solutions that rely on converting text
   back to the original octet stream are likely to fail in environments
   with multibyte characters.

   All of these factors, and others, can make it difficult to drop in a
   "verify-the-signature" filtering layer prior to other request
   processing.  The verification layer must consider the assumptions of
   downstream processing code on the state of the request body.

   Implementers of this specification should be aware of these
   difficulties and consider the best way to address them in their
   programming frameworks.






























Eaton                                                          [Page 11]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


Appendix B.  Unkeyed vs Keyed Hash Algorithms

   This specification deliberately uses an unkeyed hash algorithm
   (SHA-1) to provide an integrity check on the body instead of a keyed
   hash algorithm such as HMAC-SHA1.  This decision was made because
   signing arbitrary octet streams is poor cryptographic hygiene.  It
   can lead to unexpected problems with cryptographic protocols.

   For example, consider a proxy that uses OAuth to add authentication
   information to requests sent by an untrusted third-party.  If the
   proxy signs arbitrary octet streams, the third-party can use the
   proxy as an oracle to forge authentication messages.

   Including the result of an unkeyed hash in the normal signature base
   string allows the proxy to add an integrity check on the original
   message without creating a signing oracle.



































Eaton                                                          [Page 12]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


Appendix C.  Preventing Removal of Request Bodies

   This specification requires that Consumers not send the
   oauth_body_hash parameter on requests with form-encoded bodies, and
   requires that Service Providers reject requests that have form-
   encoded bodies and an oauth_body_hash parameter.  These restrictions
   are necessary in order to prevent a MITM from removing non-form-
   encoded request bodies.  The attack would work as follows:

   1.  Consumer signs a request with a non-form-encoded request body and
       includes a matching content-type header such as "application/
       json" or "text/plain".  The oauth_body_hash parameter is included
       as well.

   2.  MITM intercepts request and modifies the content-type of the
       request to be "application/x-www-form-urlencoded".  The MITM also
       removes the request body.  The request is then forwarded to the
       Service Provider.

   3.  The Service Provider receives the request and the signature
       validates according to the OAuth Core signature specification.

   4.  The Service Provider then needs to decide whether to check the
       oauth_body_hash value as well.  Since the request content-type is
       form-encoded, the Service Provider does not check the
       oauth_body_hash.

   5.  The removal of the body goes undetected.

   The impact of this attack is probably minimal.  The attacker can
   remove the request body, but cannot replace it with their own.  Stil,
   the goal of this specification is guaranteeing body integrity when
   both Consumers and Service Providers use the oauth_body_hash
   parameter.  Out of an excess of caution, this specification requires
   that Service Providers reject request that have both a form-encoded
   request body and an oauth_body_hash parameter.

   An alternate solution, requiring that Service Providers check the
   oauth_body_hash parameter even on form-encoded request bodies, was
   rejected due to implementation challenges.  Some web development
   frameworks block access to the raw entity body for form-encoded
   requests.









Eaton                                                          [Page 13]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


8.  References

   [NIST 800-107]
              Dang, Q., "Special Publication 800-107, Recommendation for
              Applications Using Approved Hash Algorithms".

   [OAuth Core 1.0]
              OAuth Core Workgroup, "OAuth Core 1.0".

   [RFC2045]  Freed, N. and N. Borenstein, "Multipurpose Internet Mail
              Extensions (MIME) Part One: Format of Internet Message
              Bodies", RFC 2045.

   [RFC2119]  Bradner, B., "Key words for use in RFCs to Indicate
              Requirement Levels", RFC 2119.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616.

   [RFC3174]  Eastlake, 3rd, D. and P. Jones, "US Secure Hash Algorithm
              1 (SHA1)", RFC 3174.





























Eaton                                                          [Page 14]

                   OAuth Request Body Hash 1.0 Draft 5        March 2009


Author's Address

   Brian Eaton
   Google, Inc

   Email: beaton@google.com













































Eaton                                                          [Page 15]

